{"version":3,"sources":["components/feedbackOptions/feedbackOptions.css.jsx","components/feedbackOptions/index.jsx","components/feedbackOptions/feedbackOptions.jsx","components/notification/notification.jsx","components/notification/index.jsx","components/section/section.css.jsx","components/section/section.jsx","components/section/index.jsx","components/statistics/statistics.css.jsx","components/statistics/statistics.jsx","components/statistics/index.jsx","components/feedback/feedback.jsx","components/feedback/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ButtonEl","styled","button","FeedbackOptions","options","onLeaveFeedback","buttonsList","map","name","Object","values","value","keys","type","onClick","Notification","message","defaultProps","TitleEl","h2","Section","title","children","StatisticItemEl","span","Statistics","good","neutral","bad","total","positivePercentage","Feedback","onBtnClick","countTotalFeedback","useCallback","countPositiveFeedbackPercentage","Math","round","App","useState","feedbacks","setFeedbacks","event","target","state","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04ac16c6.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst ButtonEl = styled.button`\r\n\tmargin: 10px;\r\n\tpadding: 5px 10px;\r\n\tfont-size: 1.3em;\r\n`;\r\n\r\nexport { ButtonEl };","import FeedbackOptions from './feedbackOptions';\r\nexport default FeedbackOptions;","import { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ButtonEl } from './feedbackOptions.css.jsx'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n\tconst buttonsList = options.map((button) => {\r\n\t\tconst name = Object.values(button);\r\n\t\tconst value = Object.keys(button);\r\n\t\treturn <ButtonEl type=\"button\" key={value} value={value} onClick={onLeaveFeedback}>{name}</ButtonEl>\r\n\t})\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{buttonsList}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tonLeaveFeedback: PropTypes.func\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<p>{message}</p>\r\n\t)\r\n}\r\n\r\nNotification.defaultProps = {\r\n\tmessage: ''\r\n}\r\n\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string\r\n}\r\n\r\nexport default Notification;","import Notification from './notification';\r\nexport default Notification;","import styled from 'styled-components';\r\n\r\nconst TitleEl = styled.h2`\r\n\tfont-size: 2em;\r\n`;\r\n\r\nexport { TitleEl };","import PropTypes from 'prop-types'\r\n\r\nimport {TitleEl} from './section.css.jsx'\r\n\r\nconst Section = ({ title, children }) => {\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<TitleEl>{title}</TitleEl>\r\n\t\t\t{children}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nSection.defaultProps = {\r\n\ttitle: ''\r\n}\r\n\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string\r\n}\r\n\r\nexport default Section;","import Section from './section';\r\nexport default Section;","import styled from 'styled-components';\r\n\r\nconst StatisticItemEl = styled.span`\r\n\tdisplay: block;\r\n\tmargin: 5px;\r\n\tfont-size: 1.5em;\r\n`;\r\n\r\nexport { StatisticItemEl };","import PropTypes from 'prop-types';\r\n\r\nimport {StatisticItemEl} from './statistics.css.jsx'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<StatisticItemEl>Good: {good}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Neutral: {neutral}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Bad: {bad}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Total: {total}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Positive feedback: {positivePercentage}%</StatisticItemEl>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nStatistics.defaultProps = {\r\n\tneutral: 0,\r\n\tgood: 0,\r\n\tbad: 0,\r\n\ttotal: 0,\r\n\tpositivePercentage: 0\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tneutral: PropTypes.number,\r\n\tgood: PropTypes.number,\r\n\tbad: PropTypes.number,\r\n\ttotal: PropTypes.number,\r\n\tpositivePercentage: PropTypes.number\r\n};\r\n\r\nexport default Statistics;","import Statistics from './statistics';\r\n\r\nexport default Statistics;","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport FeedbackOptions from '../feedbackOptions'\r\nimport Notification from '../notification'\r\nimport Section from '../section'\r\nimport Statistics from '../statistics'\r\n\r\nfunction Feedback({ good, neutral, bad, onBtnClick }) {\r\n\r\n\tconst countTotalFeedback = useCallback(() => {\r\n\t\treturn good + neutral + bad;\r\n\t}, [good, neutral, bad]);\r\n\r\n\tconst countPositiveFeedbackPercentage = useCallback(() => {\r\n\t\treturn good > 0 ? Math.round(good * 100 / countTotalFeedback()) : 0;\r\n\t}, [good, countTotalFeedback]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Section title='Please leave feedback'>\r\n\t\t\t\t<FeedbackOptions\r\n\t\t\t\t\toptions={[{ good: 'Good' },  { neutral: 'Neutral' }, { bad: 'Bad' }] }\r\n\t\t\t\t\tonLeaveFeedback={onBtnClick}\r\n\t\t\t\t/>\r\n\t\t\t</Section>\r\n\t\t\t<Section title='Statistics'>\r\n\t\t\t\t{countTotalFeedback() > 0 ?\r\n\t\t\t\t\t<Statistics\r\n\t\t\t\t\t\tgood={good}\r\n\t\t\t\t\t\tneutral={neutral}\r\n\t\t\t\t\t\tbad={bad}\r\n\t\t\t\t\t\ttotal={countTotalFeedback()}\r\n\t\t\t\t\t\tpositivePercentage={countPositiveFeedbackPercentage()}\r\n\t\t\t\t\t/> :\r\n\t\t\t\t\t<Notification message=\"No feedback given\"></Notification>\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t</Section>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// class Feedback extends Component {\r\n\r\n// \tcountTotalFeedback = () => {\r\n// \t\tconst { good, neutral, bad } = this.props;\r\n// \t\treturn good + neutral + bad;\r\n// \t}\r\n\r\n// \tcountPositiveFeedbackPercentage = () => {\r\n// \t\treturn this.props.good > 0 ? Math.round(this.props.good * 100 / this.countTotalFeedback()) : 0;\r\n// \t}\r\n\r\n// \trender() {\r\n// \t\tconst { good, neutral, bad, onBtnClick } = this.props;\r\n// \t\t// console.log(this.props);\r\n// \t\treturn (\r\n// \t\t\t<div>\r\n// \t\t\t\t<Section title='Please leave feedback'>\r\n// \t\t\t\t\t<FeedbackOptions\r\n// \t\t\t\t\t\toptions={[{ good: 'Good' },  { neutral: 'Neutral' }, { bad: 'Bad' }] }\r\n// \t\t\t\t\t\tonLeaveFeedback={onBtnClick}\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t</Section>\r\n// \t\t\t\t<Section title='Statistics'>\r\n// \t\t\t\t\t{this.countTotalFeedback() > 0 ?\r\n// \t\t\t\t\t\t<Statistics\r\n// \t\t\t\t\t\t\tgood={good}\r\n// \t\t\t\t\t\t\tneutral={neutral}\r\n// \t\t\t\t\t\t\tbad={bad}\r\n// \t\t\t\t\t\t\ttotal={this.countTotalFeedback()}\r\n// \t\t\t\t\t\t\tpositivePercentage={this.countPositiveFeedbackPercentage()}\r\n// \t\t\t\t\t\t/> :\r\n// \t\t\t\t\t\t<Notification message=\"No feedback given\"></Notification>\r\n// \t\t\t\t\t}\r\n\t\t\t\t\t\r\n// \t\t\t\t</Section>\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\nFeedback.defaultProps = {\r\n\tgood: 0,\r\n\tneutral: 0,\r\n\tbad: 0,\r\n}\r\n\r\nFeedback.propTypes = {\r\n\tgood: PropTypes.number,\r\n\tneutral: PropTypes.number,\r\n\tbad: PropTypes.number,\r\n\tonBtnClick: PropTypes.func\r\n}\r\n\r\nexport default Feedback;","import Feedback from './feedback';\r\n\r\nexport default Feedback;","import './App.css';\nimport { useCallback, useState } from 'react';\nimport Feedback from './components/feedback';\n\nfunction App() {\n  const [feedbacks, setFeedbacks] = useState({ good: 0, neutral: 0, bad: 0 });\n\n  const onBtnClick = useCallback(event => {\n    const value = event.target.value;\n    setFeedbacks(state => ({\n      ...state, [value]: state[value] + 1\n    }));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Feedback\n        good={feedbacks.good}\n        neutral={feedbacks.neutral}\n        bad={feedbacks.bad}\n        onBtnClick={onBtnClick}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}